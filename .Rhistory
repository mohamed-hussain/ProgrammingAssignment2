x<-1:4
y<-2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x<6]==0
x
x[x<6]<-0
x
x[x==0]<6
pwd
source('C:/Coursera/hw1_data.csv', encoding = 'UTF-8')
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-(z/my_sqrt)
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
list.files()
bye()
swirl()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2","mytest3.R")
file.copy("mytest2.R","mytest3.R")
file.path()
file.path("mytest3.R")
file.path("mytest.R","folder1","folder2")
info()
file.path("folder1","folder2")
?dir.create
dir.create("testdir2",recursive = TRUE, file.path("testdir2",dir.create("testdir2")))
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
play()
ls()
list.files()
list.dirs()
list.files()
nxt()
unlink("testdir")
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,timestamp =40)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect<-(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char,"Moh")
my_name
paste(my_name, collapse = " ")
paste("Hello","world!",sep = " ")
paste(1:3,c("X","Y","Z"))
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-(NA, 1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
play()
sum(my_na,na.rm = TRUE)
sum(my_na,na.rm = FALSE)
nxt()
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
play()
x[3]
x[3,5,7]
x[[3],[5],[7]]
?`[`
x[5]
nxt()
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
quit()
library(swirl)
bye()
source('~/.active-rstudio-document')
f(3)
source('~/.active-rstudio-document')
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
source('~/.active-rstudio-document')
z <- 10
f(3)
source('~/.active-rstudio-document')
y
source('~/.active-rstudio-document')
z <-10
f(3)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical("twins","twins")
xor(5 ==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
swirl()
swirl()
x
getwd
getwd()
submit()
swirl()
submit(F1.R)
submit("F1.R")
f(5)
f
quit()
library(swirl)
rm(list=ls())
swirl()
swirl()
Sys.Date()
mean(c(2,4,5))
swirl()
swirl()
swirl()
options(editor = "internal")
swirl()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
play()
first(c(8,4,0))
x <- c(8,4,0)
x[1]
nxt
nxt()
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("I'm done")
submit()
submit()
submit()
play()
args(mad_libs)
nxt()
submit()
submit()
submit()
mad_libs()
submit()
"%p%"
'I' %p% 'love' %p% 'R!'
quit()
getwd()
rm(list=ls())
getwd()
setwd("C:/Users/hussa/data-sciencecoursera/ProgAsg2/ProgrammingAssignment2")
source('C:/Users/hussa/data-sciencecoursera/ProgAsg2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix()
makeCacheMatrix(x)
makeCacheMatrix(matrix(1:4,2,2))
makeCacheMatrix(x=matrix(1:4,2,2))
m <- matrix(1:4,2,2)
m
solve(m)
m2<-makeCacheMatrix(m)
m2
source('C:/Users/hussa/data-sciencecoursera/ProgAsg2/ProgrammingAssignment2/cachematrix.R')
source('C:/Users/hussa/data-sciencecoursera/ProgAsg2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(m2)
cacheSolve(m2)
m <- matrix(1:9,3,3)
m
solve(m)
m <- matrix(c(1,2,3,1,2,3,1,2,3),3,3)
m
solve(m)
m <- matrix(c(1,-2,3,1,2,3,1,2,3),3,3)
solve(m)
m <- matrix(c(1,-2,3,-1,12,3,41,2,3),3,3)
solve(m)
m2<-makeCacheMatrix(m)
m2
cacheSolve(m2)
cacheSolve(m2)
bye()
quit()
